package site.yolowa.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import site.yolowa.dto.Hosting;
import site.yolowa.dto.Member;
import site.yolowa.dto.MypageHeaderCount;
import site.yolowa.dto.Reservation;
import site.yolowa.service.MypageHostingService;
import site.yolowa.utils.Pager;

//마이페이지 호스팅 관련 서비스 컨트롤러

@Controller
public class MypageServiceController {
	//숙소추가
	@Autowired
	private MypageHostingService mainHostingMypageService;
	
	//호스팅 등록 get 접근
	@RequestMapping(value = "/mypage/addlisting", method = RequestMethod.GET)
	public String addListing(HttpSession session) {
		//로그인 인증 처리
		if (session.getAttribute("loginMember") == null) {
			return "main/404";
		}
		
		return "mypage/add-listing";
	}
	
	//호스팅 등록
	@Transactional
	@RequestMapping(value = "/mypage/addlisting", method = RequestMethod.POST)
	public String addListing(@ModelAttribute Hosting hosting, HttpSession session) {
		//로그인 인증 처리
		if (session.getAttribute("loginMember") == null) {
			return "main/404";
		}
		
		try {
			mainHostingMypageService.addHosting(hosting);
		} catch (RuntimeException e) {
			System.out.println("error = " + e);
			System.out.println(hosting.toString());
			return "mypage/add-listing";
		}
		
		return "mypage/listings";
	}
	
	//예약관리
	@RequestMapping(value = "/mypage/bookings", method = RequestMethod.GET)
	public String bookings() {
		return "mypage/bookings";
	}
	
	//예약을 디스플레이 하기 위한 메소드
	@RequestMapping(value = "mypage/bookingList", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> bookingList(@RequestParam(defaultValue = "1") int pageNum, HttpSession session, @RequestParam int reservationState) {
		if(session.getAttribute("loginMember") == null) {
			return null;
		}
		Member member = (Member)session.getAttribute("loginMember");
		
		Map<String, Object> countMap = new HashMap<String, Object>();
		countMap.put("reservationState", reservationState);
		countMap.put("hostingMemberNo", member.getMemberNo());
		
		int totalbooking = mainHostingMypageService.getBookingCount(countMap);
		
		int pageSize = 5; 
		int blockSize = 5; 
		
		Pager pager = new Pager(pageNum, totalbooking, pageSize, blockSize);
		
		//System.out.println(pager.getEndRow());
		
		Map<String, Object> pagerMap = new HashMap<String, Object>();
		pagerMap.put("startRow", pager.getStartRow());
		pagerMap.put("endRow", pager.getEndRow());
		pagerMap.put("reservationState", reservationState);
		pagerMap.put("LoginMemberNo", member.getMemberNo());
		
		Map<String, Object> returnMap = new HashMap<String, Object>();
		returnMap.put("bookingList", mainHostingMypageService.getBookingList(pagerMap));
		returnMap.put("pager", pager);
		
		return returnMap;
	}
	
	//호스팅 대쉬보드
	@RequestMapping(value = "/mypage/dashboard", method = RequestMethod.GET)
	public String dashBoard(HttpSession session, Model model) {
		Member member = (Member)session.getAttribute("loginMember");
		model.addAttribute("dashboardCount", mainHostingMypageService.getMypageHeaderCount(member.getMemberNo()));
		return "mypage/dashboard";
	}
	
	//네비 메세지 카운트
	@ModelAttribute("newMessage")
	public MypageHeaderCount newMessage(HttpSession session) {
		if(session.getAttribute("loginMember") == null) {
			return null;
		}
		Member member = (Member)session.getAttribute("loginMember");
		return mainHostingMypageService.getMypageHeaderCount(member.getMemberNo());
	}
	
	//숙소관리
	@RequestMapping(value = "/mypage/listings", method = RequestMethod.GET)
	public String listings() {
		return "mypage/listings";
	}
	
	//북마크
	@RequestMapping(value = "/mypage/bookmarks", method = RequestMethod.GET)
	public String bookmarks(HttpSession session) {
		if(session.getAttribute("loginMember") == null) {
			return "redirect:/";
		}
		/* 테스트
		Member member = (Member)session.getAttribute("loginMember");
		System.out.println(mainHostingMypageService.getBookmarkCount(member.getMemberNo()));
		 */
		return "mypage/bookmarks";
	}
	
	//북마크를 디스플레이 하기 위한 메소드
	@RequestMapping(value = "mypage/bookmarkList", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> bookmarkList(@RequestParam(defaultValue = "1") int pageNum, HttpSession session, String orderby) {
		if(session.getAttribute("loginMember") == null) {
			return null;
		}
		Member member = (Member)session.getAttribute("loginMember");
		int totalBookmark = mainHostingMypageService.getBookmarkCount(member.getMemberNo());
		
		int pageSize = 5; 
		int blockSize = 5; 
		
		Pager pager = new Pager(pageNum, totalBookmark, pageSize, blockSize);
		
		Map<String, Object> pagerMap = new HashMap<String, Object>();
		pagerMap.put("startRow", pager.getStartRow());
		pagerMap.put("endRow", pager.getEndRow());
		pagerMap.put("orderby", orderby);
		pagerMap.put("LoginMemberNo", member.getMemberNo());
		
		Map<String, Object> returnMap = new HashMap<String, Object>();
		returnMap.put("bookmarkList", mainHostingMypageService.getBookmarkList(pagerMap));
		returnMap.put("pager", pager);
		
		return returnMap;
	}
	
	//리저베이션 상태값 변경
	@RequestMapping(value = "mypage/modifyReservationState", method = {RequestMethod.PUT, RequestMethod.PATCH})
	@ResponseBody
	public String cansel(@RequestBody Reservation reservation) {
		mainHostingMypageService.modifyReservationState(reservation);
		return "success";
	}
	
	@RequestMapping(value = "/invoice", method = RequestMethod.GET)
	public String invoice(@RequestParam int reservationNo, Model model) {
		model.addAttribute("invoice", mainHostingMypageService.getInvoice(reservationNo));
		return "invoice";
	}
	
	//마이페이지 메세지 관리
	@RequestMapping(value = "/mypage/messages", method = RequestMethod.GET)
	public String messages() {
		return "mypage/messages";
	}
	
}
