package site.yolowa.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import site.yolowa.dto.Claim;
import site.yolowa.dto.MainMessage;
import site.yolowa.dto.MainMessageCount;
import site.yolowa.dto.MainReview;
import site.yolowa.dto.MainReviewStarCount;
import site.yolowa.dto.Member;
import site.yolowa.dto.Message;
import site.yolowa.dto.Review;
import site.yolowa.service.MainHostingService;
import site.yolowa.service.MainMessageService;

//호스팅과 관련된 검색, 상세, 리뷰 컨트롤러
@Controller
public class MainServiceController {
	@Value("${Commission}")
	private int commission;
	
	@Autowired
	private MainHostingService mainHostingService;
	
	@Autowired
	private MainMessageService mainMessageService;
		
	/*
	 * 메인페이지
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String main(Model model) {
		model.addAttribute("searchIndexSuperhost", mainHostingService.HostingSearchSuperhost());
		model.addAttribute("searchIndexLately", mainHostingService.HostingSearchIndexLately());
		model.addAttribute("searchIndexFamous", mainHostingService.HostingSearchFamous());
		model.addAttribute("searchCounting", mainHostingService.HostingSearchCounting());
		return "main";
	}
	
	
	
	//그리드 서치
	@RequestMapping(value = "/gridsearch", method = RequestMethod.GET)
	public String gridSearch() {
		return "main/hosting-grid-search";
	}
	
	//리스트 서치
	@RequestMapping(value = "/listsearch", method = RequestMethod.GET)
	public String listSearch() {
		return "main/hosting-list-search";
	}
	
	
	
	/*
	 * 회사 소개 페이지
	 */
	@RequestMapping(value = "/about", method = RequestMethod.GET)
	public String about() {
		return "main/about";
	}
	
	
	
	/*
	 * 숙소 예약 1단계
	 */
	@RequestMapping(value = "/order1", method = RequestMethod.GET)
	public String order1() {
		return "main/order-1";
	}
	
	//숙소 예약 2단계
	@RequestMapping(value = "/order2", method = RequestMethod.GET)
	public String order2() {
		return "main/order-2";
	}
	
	
	
	/*
	 * 푸터 contacts 
	 */
	@RequestMapping(value = "/contacts", method = RequestMethod.GET)
	public String contacts() {
		return "main/contacts";
	}
	
	
	
	/*
	 * 메인 페이지의 헤더 공지사항 결과를 반환하기 위한 메소드
	 */
	@ModelAttribute("headerNotice")
	public List<MainMessage> getNoticeHeaderList(HttpSession session) {
		if(session.getAttribute("loginMember") == null) {
			return null;
		}
		Member member = (Member)session.getAttribute("loginMember");
		return mainMessageService.getMessageNoticeList(member.getMemberNo());
	}
	
	//메인 페이지의 헤더 메세지 결과를 반환하기 위한 메소드
	@ModelAttribute("headerMessage")
	public List<MainMessage> getMessageHeaderList(HttpSession session) {
		if(session.getAttribute("loginMember") == null) {
			return null;
		}
		Member member = (Member)session.getAttribute("loginMember");
		return mainMessageService.getMessageHeaderList(member.getMemberNo());
	}
	
	//메인 페이지의 새로 도착한 메세지 카운팅
	@ModelAttribute("headerMessageCount")
	public MainMessageCount getMessageHeaderCount(HttpSession session) {
		if(session.getAttribute("loginMember") == null) {
			return null;
		}
		Member member = (Member)session.getAttribute("loginMember");
		return mainMessageService.getCountingMessageHeader(member.getMemberNo());
	}
	
	
	
	/*
	 * 호스팅 디테일
	 */
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public String detail(@RequestParam String hostingNo, @RequestParam(defaultValue = "") String dates, 
			@RequestParam(defaultValue = "1") int qtyInput, Model model) {
		model.addAttribute("qtyInput", qtyInput);
		model.addAttribute("dates", dates);
		model.addAttribute("hostingDetail", mainHostingService.selectMainHostingDetail(Integer.parseInt(hostingNo)));
		return "main/hosting-detail";
	}
	
	//호스팅 디테일 유저 -> 호스트에게 문의 메세지
	@RequestMapping(value = "/sendHostMessage", method = RequestMethod.POST)
	@ResponseBody
	public String sendHostMessage(@RequestBody Message message) {
		mainMessageService.addMessage(message);
		return "success";
	}
	
	//메인 디테일에서 신고 전송
	@RequestMapping(value = "/sendClaimMessage", method = RequestMethod.POST)
	@ResponseBody
	public String sendClaimMessage(@RequestBody Claim claim) {
		mainMessageService.addClaim(claim);
		return "success";
	}
	
	//메인 디테일 페이지에서 리뷰 작성
	@RequestMapping(value = "/writeHostReview", method = RequestMethod.POST)
	@ResponseBody
	public String writeHostReview(@RequestBody Review review) {
		mainMessageService.addReviewDetail(review);
		return "success";
	}
	
	//메인 디테일 페이지 리뷰 디스플레이
	@RequestMapping(value = "/detailReviewDisplay", method = RequestMethod.GET)
	@ResponseBody
	public List<MainReview> detailReviewDisplay(@RequestParam int hostingNo, @RequestParam(defaultValue = "2") int endRow) {
		
		Map<String, Object> pagerMap = new HashMap<String, Object>();
		pagerMap.put("hostingNo", hostingNo);
		pagerMap.put("startRow", 1);
		pagerMap.put("endRow", endRow);
		
		return mainMessageService.getReviewDetailList(pagerMap);
	}
	
	//메인 디테일 페이지 스타 카운팅
	@RequestMapping(value = "/detailStarCount", method = RequestMethod.GET)
	@ResponseBody
	public MainReviewStarCount detailStarCount(@RequestParam int hostingNo) {
		return mainMessageService.getReviewStarCount(hostingNo);
	}
}
