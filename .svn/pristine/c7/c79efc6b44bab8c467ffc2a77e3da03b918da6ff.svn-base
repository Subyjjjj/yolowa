package site.yolowa.controller;

import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import site.yolowa.dto.Member;
import site.yolowa.service.MainMemberService;
import site.yolowa.utils.MainEncrypt;

@Controller
public class MainMemberController {
		
	@Autowired
	private MainMemberService mainMemberService;
	
	
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(@RequestParam String email,String password, Model model, HttpSession session, String autoLoginYolowa, HttpServletResponse response,
				HttpServletRequest request){
		
		if(autoLoginYolowa!=null) {
			Cookie auto=new Cookie("autoLoginYolowa", email);			
			int max=2147483647;			
			auto.setMaxAge(max);			
			response.addCookie(auto);
			System.out.println("쿠키 생성 완료");
			System.out.println("쿠키의 이름 = "+auto.getName());
			System.out.println("쿠키의 내용 = "+auto.getValue());
		}
		
		
		Member member=mainMemberService.selectMember(email);		
		
		String inputPass=MainEncrypt.encrypt(password);	
		
		
		
		if(member==null || !member.getMemberPassword().equals(inputPass)) {
			return "redirect:/";			
		}
		
		
		
		mainMemberService.updateJoinDate(email);
		session.setAttribute("loginMember", member);		
		
	
		if(session.getAttribute("destURI")!=null) {
			String destURI=(String)session.getAttribute("destURI");
			session.removeAttribute("destURI");
			return "redirect:"+destURI;
		}
		
		return "redirect:/";
	}
	
	
	@RequestMapping(value = "loginSubmit", method = RequestMethod.POST)
	@ResponseBody
	public String loginSubmit(@RequestBody Member member) {
		String inputEmail=member.getMemberEmail();
		String inputPassword=MainEncrypt.encrypt(member.getMemberPassword());		
		
		Member joinMember=mainMemberService.selectMember(inputEmail);

		if(inputEmail=="" || member.getMemberPassword()=="") {
			return "noContent";
		} else if(joinMember==null || !inputPassword.equals(joinMember.getMemberPassword())) {
			return "noMatch";			
		} else {
			return "success";			
		}		
	}
	
	
	
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout(HttpSession session) {
		session.invalidate();
		System.out.println("세션 제거 완료");
		return "redirect:/";
	}
	
	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String join() {
				
		return "register";
	}
	
	
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String join(@RequestParam String name, String birthday, String email, String password, HttpSession session ) {
	
		Member member=new Member();
		
		String inputPass=MainEncrypt.encrypt(password);
				
		member.setMemberName(name);
		member.setMemberBirthday(birthday);
		member.setMemberEmail(email);
		member.setMemberPassword(inputPass);
			
		mainMemberService.insertMember(member);
		
		return "redirect:/";
	}
	
	@RequestMapping(value = "mypage/user-profile", method = RequestMethod.GET)
	public String profile(HttpSession session,Model model) {
		Member member=(Member)session.getAttribute("loginMember");
		
		if(member==null) {			
			return "mypage/loginPage";
		}
		
		
		model.addAttribute("name",member.getMemberName());
		model.addAttribute("birthday",member.getMemberBirthday());
		model.addAttribute("email",member.getMemberEmail());		
		if(member.getMemberPhone()!=null) model.addAttribute("phone",member.getMemberPhone());		
		model.addAttribute("sex",member.getMemberSex());		
		model.addAttribute("mailing",member.getMemberMailing());
		model.addAttribute("profile",member.getMemberProfile());
		
	
		return "mypage/user-profile";
	}
	
	
	
	@RequestMapping(value = "mypage/user-profile", method = RequestMethod.POST)
	public String profileSubmit(HttpSession session,Model model, String name, String birthday, String phone, String email, String sex, String mailing, String profile, String msg) {
		Member member=(Member)session.getAttribute("loginMember");
		
		if(member==null) {
			return "redirect:/";
		}
		
		member.setMemberName(name);
		member.setMemberBirthday(birthday);
		member.setMemberPhone(phone);
			
		if(!member.getMemberEmail().equals(email)) {			
			member.setMemberEmail(email);
		}
		
		member.setMemberSex(Integer.parseInt(sex));
		member.setMemberMailing(Integer.parseInt(mailing));
		member.setMemberProfile(profile);		
		
		mainMemberService.updateMember(member);	
		
		
		return "redirect:/mypage/user-profile";
	}
	
	@RequestMapping(value = "mypage/quit", method = RequestMethod.GET)
	@ResponseBody
	public String quit(HttpSession session) {
		Member member=(Member)session.getAttribute("loginMember");
		
		mainMemberService.removeMember(member.getMemberEmail());
		session.invalidate();
		
		return "success";	
	}
	
	@RequestMapping(value = "existCheck", method = RequestMethod.POST)
	@ResponseBody
	public String existCheck(@RequestBody Member member) {
		String inputEmail=member.getMemberEmail();
		
		Member checkmember=mainMemberService.selectMember(inputEmail);		
		
		if(checkmember==null) {			
			return "success";
		}			
		
		return "false";				
	}
	
	@RequestMapping(value="birthdayCheck", method= RequestMethod.POST)
	@ResponseBody
	public String birthdayCheck(@RequestBody Member member) {
		String inputBirthday=member.getMemberBirthday();
		
		Date date=new Date();
		
		SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMdd");
		String now=sdf.format(date);
		
		
		
		int numBirthday=Integer.parseInt(inputBirthday.replace("-", ""));
		
		if((numBirthday+"").length()<8) {			
			return "false";
		} 
		
		String yearBirthday=(numBirthday+"").substring(0,4);
		System.out.println("생년 = "+yearBirthday);
		
		if(Integer.parseInt(yearBirthday)<1970) {
			return "false";
		}
		
		
		int numNow=Integer.parseInt(now);
		
		if((numBirthday-numNow)>0) {
			return "false";
		}
		
		return "success";		
	}
	
}

