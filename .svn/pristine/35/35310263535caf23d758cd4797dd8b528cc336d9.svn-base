package site.yolowa.controller;


import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import site.yolowa.dto.Board;
import site.yolowa.dto.Sns;
import site.yolowa.service.AdminEtcService;

@Controller
public class AdminEtcController {
	private Logger logger=LoggerFactory.getLogger(AdminEtcController.class);
	private Integer adminTableDefaultRowCount = 300;
	
	//yyyy년 MM월 dd일 hh:mm:ss
	@Autowired
	@Qualifier("AdminTableNowDateFormat")
	private SimpleDateFormat adminTableNowDateFormat;
	
	@Autowired
	@Qualifier("jacksonMapper")
	private ObjectMapper jacksonmapper;
	
	@Autowired
	private AdminEtcService adminEtcService;
	
	
	@RequestMapping(value = "/admin/etc/advertise", method = RequestMethod.GET)
	public String adminEtcAdvertise() {
		
		return "admin/etc/advertise";
	}
	
	@Transactional
	@RequestMapping(value = "/admin/etc/board", method = RequestMethod.POST)
	public String addAdminEtcBoard(@ModelAttribute Board board, HttpSession session) {
		try {
			//나중에 session으로 처리 할 예정
			board.setBoardWriterNo(1);
			//
			
			adminEtcService.addAdminBoardNotice(board);
			
			System.out.println(board.toString());
		} catch (RuntimeException e) {
			System.out.println("error = " + e);
			System.out.println(board.toString());
			return "admin/etc/board";
		}
		
		return "admin/etc/board";
	}
	
	/*
	//게시글을 전달받아 REST_BOARD 테이블에 저장하고 결과를 문자열로 응답하는 요청처리 메소드
		@RequestMapping(value = "/board_add", method = RequestMethod.POST)
		@ResponseBody
		//@RequestBody 어노테이션를 이용하여 JSON 형태의 입력값을 Java 객체의 필드로 변환받아 저장
		public String restBoardAdd(@RequestBody RestBoard board) {
			//XSS 공격에 대한 방어로 태그 관련 문자를 회피문자로 변경
			board.setContent(HtmlUtils.htmlEscape(board.getContent()));
			restBoardService.addRestBoard(board);
			return "success";
		}
	*/
	
	@RequestMapping(value = "/admin/etc/board", method = RequestMethod.GET)
	public String adminEtcBoard(@RequestParam Map<String, Object> filter, Model model) {
		Map<String, Object> map = new HashMap<String, Object>();
		// 필터세팅
		// 받을 필터가 없을 경우를 확인. 필터내 객체가 없을 경우
		if(filter.entrySet().size() != 0) {
			// 필터를 위한 기본 세팅
			
			List<String> titles = new ArrayList<String>();
			List<String> writers = new ArrayList<String>();
			
			List<Integer> states = new ArrayList<Integer>();
			
			// 범위 검색을 위해 반환
			int keywordCount = (String)filter.get("keywordCount")==""?0:Integer.parseInt((String)filter.get("keywordCount"));
			
			// 키워드 검색
			for(int i=1; i<=keywordCount; i++) {
				String keywordFormat = (String)filter.get("keywordFormat"+i);
				// 선택된 필터정보를 리스트에 추가
				if(keywordFormat != null) {
					switch (keywordFormat) {
					case "title":
						titles.add((String)filter.get("keywordValue"+i));
						break;
					case "writer":
						writers.add((String)filter.get("keywordValue"+i));
						break;
					}
				}
			}
			
			// 게시판 게시 상태 필터 추가
			if((String)filter.get("statePost") != null){
				states.add(((String)filter.get("statePost")).equals("")?10:Integer.parseInt((String)filter.get("statePost")));
			}
			if((String)filter.get("stateStop") != null){
				states.add(((String)filter.get("stateStop")).equals("")?10:Integer.parseInt((String)filter.get("stateStop")));
			}
			
			// 필터에서 받은 검색정보를 맵에 저장
			map.put("category", filter.get("category"));
			
			map.put("titles", titles);
			System.out.println("titles = "+titles);
			map.put("writers", writers);
			System.out.println("writers = "+writers);
			
			map.put("states", states);
			System.out.println("states = "+states);
			
			map.put("count", Integer.parseInt((String)filter.get("searchRow")));
			
			// 맵을 이용하여 검색
			model.addAttribute("boardTableList", adminEtcService.getAdminEtcBoard(map));
		}else {
			// filter가 적용되지 않을 경우
			map.put("filter", "off");
			map.put("count", adminTableDefaultRowCount);
			model.addAttribute("boardTableList", adminEtcService.getAdminEtcBoard(map));
		}
		
		
		// 업데이트 시간을 반환
		model.addAttribute("changeDate", adminTableNowDateFormat.format(new Date()));
		// 요청 필터정보를 반환
		try {
			model.addAttribute("filter", jacksonmapper.writeValueAsString(filter));
		} catch (JsonProcessingException e) {
			// pasting error
			logger.info("!!! jacksonParsing Exception !!!");
		}
		//
		
		return "admin/etc/board";
	}
	
	
	
	@RequestMapping(value = "/admin/etc/help", method = RequestMethod.GET)
	public String adminEtcHelp(@RequestParam Map<String, Object> filter, Model model) {
		//
		Map<String, Object> map = new HashMap<String, Object>();
		// 필터세팅
		// 받을 필터가 없을 경우를 확인. 필터내 객체가 없을 경우
		if(filter.entrySet().size() != 0) {
			// 필터를 위한 기본 세팅
			
			List<String> titles = new ArrayList<String>();
			List<String> writers = new ArrayList<String>();
			
			List<Integer> states = new ArrayList<Integer>();
			
			// 범위 검색을 위해 반환
			int keywordCount = (String)filter.get("keywordCount")==""?0:Integer.parseInt((String)filter.get("keywordCount"));
			
						
			// 키워드 검색
			for(int i=1; i<=keywordCount; i++) {
				String keywordFormat = (String)filter.get("keywordFormat"+i);
				// 선택된 필터정보를 리스트에 추가
				if(keywordFormat != null) {
					switch (keywordFormat) {
					case "title":
						titles.add((String)filter.get("keywordValue"+i));
						break;
					case "writer":
						writers.add((String)filter.get("keywordValue"+i));
						break;
					}
				}
			}
			
			// 게시판 게시 상태 필터 추가
			if((String)filter.get("statePost") != null){
				states.add(((String)filter.get("statePost")).equals("")?10:Integer.parseInt((String)filter.get("statePost")));
			}
			if((String)filter.get("stateStop") != null){
				states.add(((String)filter.get("stateStop")).equals("")?10:Integer.parseInt((String)filter.get("stateStop")));
			}
			
			// 필터에서 받은 검색정보를 맵에 저장
			map.put("category", filter.get("category"));
			
			map.put("titles", titles);
			map.put("writers", writers);
			
			map.put("states", states);
			
			map.put("count", Integer.parseInt((String)filter.get("searchRow")));
			
			// 맵을 이용하여 검색
			model.addAttribute("boardTableList", adminEtcService.getAdminEtcHelp(map));
		}else {
			// filter가 적용되지 않을 경우
			map.put("filter", "off");
			map.put("count", adminTableDefaultRowCount);
			model.addAttribute("boardTableList", adminEtcService.getAdminEtcHelp(map));
		}
		
		
		// 업데이트 시간을 반환
		model.addAttribute("changeDate", adminTableNowDateFormat.format(new Date()));
		// 요청 필터정보를 반환
		try {
			model.addAttribute("filter", jacksonmapper.writeValueAsString(filter));
		} catch (JsonProcessingException e) {
			// pasting error
			logger.info("!!! jacksonParsing Exception !!!");
		}
		//
		
		
		return "admin/etc/help";
	}
	
	@RequestMapping(value = "/admin/etc/sns", method = RequestMethod.GET)
	public String adminEtcSns() {
		return "admin/etc/sns";
	}
	
	@RequestMapping(value = "/admin/etc/sns/data", method = RequestMethod.GET)
	@ResponseBody
	public Sns adminRestEtcSns(HttpServletRequest request) {
		try {
			return adminEtcService.getAdminSns(request);
		} catch (IOException e) {
			return null;
		}
	}
	
	@RequestMapping(value = "/admin/etc/sns/data", method = RequestMethod.POST)
	@ResponseBody
	public boolean adminRestEtcSns(@RequestBody(required = true) Sns sns, HttpServletRequest request) {
		try {
			return adminEtcService.modifySns(sns, request);
		} catch (IOException e) {
			return false;
		}
	}
	
	@RequestMapping(value = "/admin/etc/terms", method = RequestMethod.GET)
	public String adminEtcTerms() {
		
		return "admin/etc/terms";
	}
}
